# PPS-Unidad3Actividad12-Broken Authentication
Explotaci√≥n y Mitigaci√≥n de Broken Authenticati√≥n().
Tenemos como objetivo:

> - Ver c√≥mo se pueden hacer ataques autenticaci√≥n.
>
> - Analizar el c√≥digo de la aplicaci√≥n que permite ataques de autenticaci√≥n d√©bil.
>
> - Implementar diferentes modificaciones del codigo para aplicar mitigaciones o soluciones.

## ¬øQu√© es la Autenticaci√≥n d√©bil?
---

Algunos sitios web ofrecen un proceso de registro de usuarios que automatiza (o semiautoma) el aprovisionamiento del acceso del sistema a los usuarios. Los requisitos de identidad para el acceso var√≠an de una identificaci√≥n positiva a ninguna, dependiendo de los requisitos de seguridad del sistema. Muchas aplicaciones p√∫blicas automatizan completamente el proceso de registro y aprovisionamiento porque el tama√±o de la base de usuarios hace que sea imposible administrar manualmente. Sin embargo, muchas aplicaciones corporativas aprovisionar√°n a los usuarios manualmente, por lo que este caso de prueba puede no aplicarse.

Esto puede incluir credenciales d√©biles, almacenamiento inseguro de contrase√±as, gesti√≥n inadecuada de sesiones y falta de protecci√≥n contra ataques de fuerza bruta.

**Consecuencias de Autenticaci√≥n d√©bil:**
- Descubrimiento de credenciales de usuario.
- Ejecuci√≥n de ataques de suplantaci√≥n de usuarios. 

- 
## ACTIVIDADES A REALIZAR
---
> Lee detenidamente la secci√≥n de vulnerabilidades de subida de archivos.  de la p√°gina de PortWigger <https://portswigger.net/web-security/authentication>
>
> Lee el siguiente [documento sobre Explotaci√≥n y Mitigaci√≥n de ataques de Remote Code Execution](./files/ExplotacionYMitigacionBrokenAuthentication.pdf>
> 
> Tambi√©n y como marco de referencia, tienes [ la secci√≥n de correspondiente de los Procesos de Registros de Usuarios del  **Proyecto Web Security Testing Guide** (WSTG) del proyecto **OWASP**.](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/03-Identity_Management_Testing/02-Test_User_Registration_Process)
>


Vamos realizando operaciones:

## Creaci√≥n de la Base de Datos

Para realizar esta actividad necesitamos acceder a una Base de datos con usuarios y contrase√±as. Si ya la has creado en la actividad de Explotaci√≥n y mitigaci√≥n de ataques de inyecci√≥n SQL, no es necesario que la crees de nuevo. Si no la has creado, puedes verlo en <https://github.com/jmmedinac03vjp/PPS-Unidad3Actividad4-InyeccionSQL> en la secci√≥n de Creaci√≥n de Base de datos.

Crea la tabla de usuarios. Deber√≠a de mostrarte alg√≥ as√≠ al acceder a:

~~~
http://localhost:8080
~~~

![](images/ba1.png)

## C√≥digo vulnerable

El c√≥digo contiene varias vulnerabilidades que pueden ser explotadas para realizar ataques de autenticaci√≥n rota.

Crear al archivo **login_weak.php** con el siguiente contenido (tencuidado de sustitu√≠r **mi_password** por la contrase√±a de root de tu BBDD:

~~~
<?php
// creamos la conexi√≥n 
$conn = new mysqli("database", "root", "josemi", "SQLi");

if ($conn->connect_error) {
        // Excepci√≥n si nos da error de conexi√≥n
        die("Error de conexi√≥n: " . $conn->connect_error);
}
if ($_SERVER["REQUEST_METHOD"] == "POST" || $_SERVER["REQUEST_METHOD"] == "GET") {
        // Recogemos los datos pasados
        $username = $_REQUEST["username"];
        $password = $_REQUEST["password"];

        print("Usuario: " . $username . "<br>");
        print("Contrase√±a: " . $password . "<br>");

        // preparamos la consulta
        $query = "SELECT * FROM usuarios WHERE usuario = '$username' AND contrasenya = '$password'";
        print("Consulta SQL: " . $query . "<br>");

        //realizamos la consulta y recogemos los resultados
        $result = $conn->query($query);
        if ($result->num_rows > 0) {
        echo "Inicio de sesi√≥n exitoso";
        } else {
                echo "Usuario o contrase√±a incorrectos";
        }
}
$conn->close();

?>
<form method="post">
        <input type="text" name="username" placeholder="Usuario">
        <input type="password" name="password" placeholder="Contrasenya">
        <button type="submit">Iniciar Sesi√≥n</button>
</form>
~~~
Antes de acceder la p√°gina web, asegurarse de que el servicio est√° en ejecuci√≥n, y si es necesario, arrancar o reiniciar el servicio.

Acceder a la pagina web aunque tambi√©n podemos poner directamente el usuario y contrase√±a. Un ejemplo es  el siguiente enlace:

~~~
http://localhost/login_weak.php?username=admin&password=123456
~~~


Vemos que si los datos son incorrectos nos muestra que no lo es:

![](images/ba2.png)

Y si es correcta nos lo indica:

![](images/ba3.png)



**Vulnerabilidades del c√≥digo:**
1. Inyecci√≥n SQL: La consulta SQL usa variables sin validaci√≥n, lo que permite ataques de inyecci√≥n.

2. Uso de contrase√±as en texto plano: No se usa hashing para almacenar las contrase√±as, lo que facilita su robo en caso de acceso a la base de datos.

3. Falta de control de intentos de inicio de sesi√≥n: No hay mecanismos de protecci√≥n contra ataques de fuerza bruta.

4. Falta de gesti√≥n segura de sesiones: No se generan tokens de sesi√≥n seguros tras un inicio de sesi√≥n exitoso.

---


![](images/ba1.png)
![](images/ba1.png)
![](images/ba1.png)
![](images/ba1.png)
![](images/ba1.png)
![](images/ba1.png)
![](images/ba1.png)

![](images/.png)


### **C√≥digo seguro**
---

Aqu√≠ est√° el c√≥digo securizado:

üîí Medidas de seguridad implementadas

- :

        - 

        - 



üöÄ Resultado

‚úî 

‚úî 

‚úî 

## ENTREGA

> __Realiza las operaciones indicadas__

> __Crea un repositorio  con nombre PPS-Unidad3Actividad6-Tu-Nombre donde documentes la realizaci√≥n de ellos.__

> No te olvides de documentarlo convenientemente con explicaciones, capturas de pantalla, etc.

> __Sube a la plataforma, tanto el repositorio comprimido como la direcci√≥n https a tu repositorio de Github.__

